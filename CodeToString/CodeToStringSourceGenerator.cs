using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace NSourceGenerators
{
    [Generator]
    public class CodeToStringSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForPostInitialization(PostInitializationContext);
            context.RegisterForSyntaxNotifications(() => new MySyntaxReceiver());
        }

        private void PostInitializationContext(GeneratorPostInitializationContext context)
        {
            context.AddSource("Attribute.g.cs", SourceText.From(CodeToStringAttribute, Encoding.UTF8));
        }

        private class MySyntaxReceiver : ISyntaxReceiver
        {
            public List<CSharpSyntaxNode> DecoratedNodes { get; private set; } = new List<CSharpSyntaxNode> ();

            
            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                
                if (syntaxNode is MemberDeclarationSyntax memberDeclarationSyntax)                    
                {
                    foreach (var attributeLists in memberDeclarationSyntax.AttributeLists)
                    {
                        foreach (var attribute in attributeLists.Attributes)
                        {
                            if (attribute.Name.ToString() == "CodeToString")
                            {
                                DecoratedNodes.Add(memberDeclarationSyntax);
                            }
                        }
                    }
                }
                //if (syntaxNode is TypeDeclarationSyntax typeDeclarationSyntax)
                //{
                //    foreach (var attributeLists in typeDeclarationSyntax.AttributeLists)
                //    {
                //        foreach (var attribute in attributeLists.Attributes)
                //        {
                //            if (attribute.Name.ToString() == "CodeToString")
                //            {
                //                DecoratedNodes.Add(typeDeclarationSyntax);
                //            }
                //        }
                //    }
                //}
            }
        }

        private protected static readonly SymbolDisplayFormat symbolDisplayFormat = SymbolDisplayFormat.CSharpErrorMessageFormat
            .WithParameterOptions(SymbolDisplayParameterOptions.None);
        public void Execute(GeneratorExecutionContext context)
        {           
            var syntaxReceiver = (MySyntaxReceiver)context.SyntaxReceiver;

            var sb = new StringBuilder();

            

            foreach (var node in syntaxReceiver.DecoratedNodes) 
            {
                if (node is MethodDeclarationSyntax methodDeclarationSyntax)
                {
                    var sm = context.Compilation.GetSemanticModel(node.SyntaxTree);
                    var symbol = sm.GetDeclaredSymbol(node, context.CancellationToken);

                    var key = symbol.ToDisplayString(symbolDisplayFormat);
                    if (key.EndsWith("()"))
                    {
                        key = key.Remove(key.Length - 2);
                    }

                    var value = methodDeclarationSyntax.ToFullString();

                    var line = $"map[\"{key}\"] = \"\"\"\r\n{value}\"\"\";";
                    sb.AppendLine(line);

                    //var typeName = symbol.ContainingType.Name;
                    //var s = symbol.ContainingNamespace.ToDisplayString();

                    //var x1 = symbol.Name;
                   
                
                }
            }



            string source = $@"// <auto-generated/>
using System.Collections.Generic;

namespace NSourceGenerators
{{
    internal static class CodeToStringRepo
    {{
        private static readonly Dictionary<string, string> map;


        public static string GetText(string index)
        {{
            return map[index]; 
        }}


        static CodeToStringRepo()
        {{
             {sb}
        }}
    }}
}}
";

            context.AddSource($"CodeToStringRepo.g.cs", source);
        }

       






        private const string CodeToStringAttribute = """
namespace NSourceGenerators
{
    [System.AttributeUsage(System.AttributeTargets.Method)]
    internal class CodeToStringAttribute : System.Attribute
    {
    }
}
""";
    }
}